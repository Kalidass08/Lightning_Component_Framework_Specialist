"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../../lib/force-cli-display");
const Config = require("../../lib/force-cli-config");
const Messages = require("../../lib/force-cli-messages");
const logApi = require("../logApi");
let logger;
class DataSoqlQueryCommand {
    constructor() {
        logger = logApi.child('data:soql:query');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context.flags.query) {
                try {
                    let conn = yield Config.getActiveConnection(context);
                    if (context.flags.usetoolingapi) {
                        return yield conn.tooling.query(context.flags.query, function (err, result) {
                            return __awaiter(this, void 0, void 0, function* () {
                                return yield handleResults(conn, err, result, context.flags.json);
                            });
                        });
                    }
                    else {
                        return yield conn.query(context.flags.query, function (err, result) {
                            return __awaiter(this, void 0, void 0, function* () {
                                return yield handleResults(conn, err, result, context.flags.json);
                            });
                        });
                    }
                }
                catch (err) {
                    logger.error(err);
                    throw Error(err.message);
                }
            }
            else {
                throw Error(context.command);
            }
        });
    }
}
exports.DataSoqlQueryCommand = DataSoqlQueryCommand;
/**
 * get attribute names from record object structure
 * exposed for unit testing
 * @param {Object} record - any single record to get the attribute structure from
 * @param {string} relationshipName - optional attribute prefix
 * @returns {string[]}
 */
exports.getAllAttributesNames = function (record, relationshipName) {
    let attributes = [];
    if (record) {
        for (let propertyKey in record) {
            if (record.hasOwnProperty(propertyKey)) {
                let property = record[propertyKey];
                if (propertyKey === 'attributes') {
                    // skip metadata object
                }
                else if (property && typeof property === 'object') {
                    // need null check because attributes can have null value but need to go to else condition
                    // relationship name for attribute prefix
                    attributes = attributes.concat(exports.getAllAttributesNames(property, propertyKey));
                }
                else {
                    if (relationshipName) {
                        attributes.push(relationshipName + '.' + propertyKey);
                    }
                    else {
                        // no relationship name for top level attributes
                        attributes.push(propertyKey);
                    }
                }
            }
        }
    }
    return attributes;
};
let handleResults = function (conn, err, result, json) {
    return __awaiter(this, void 0, void 0, function* () {
        if (err) {
            throw Error(err.message);
        }
        if (result.totalSize > 0 && result.records) {
            // get all result batches
            let moreResults = result;
            while (!moreResults.done) {
                if (moreResults.nextRecordsUrl) {
                    try {
                        moreResults = yield conn.queryMore(moreResults.nextRecordsUrl);
                        if (moreResults.records) {
                            result.records = result.records.concat(moreResults.records);
                        }
                        else {
                            throw Error(Messages.get('DataSOQLQueryMoreMissingRecords'));
                        }
                    }
                    catch (err) {
                        logger.error(err);
                        throw Error(err.message);
                    }
                }
                else {
                    throw Error(Messages.get('DataSOQLQueryMoreMissingUrl'));
                }
            }
            if (result.records) {
                if (json) {
                    delete result.nextRecordsUrl;
                    result.done = true;
                    return result;
                }
                else {
                    // print table
                    let attributeNames = exports.getAllAttributesNames(result.records[0]);
                    Display.soqlQuery(attributeNames, result.records);
                }
            }
            else {
                throw Error(Messages.get('DataSOQLQueryMoreMissingRecords'));
            }
        }
        else {
            if (json) {
                return result;
            }
            else {
                Display.info(Messages.get('DataSOQLQueryNoResults'));
            }
        }
    });
};

//# sourceMappingURL=dataSoqlQueryCommand.js.map
